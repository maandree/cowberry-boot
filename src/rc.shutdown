#!/bin/dash
# -*- shell-script -*-

SCRIPT=shutdown # Can be used by sourced files to identify where they are being run from

. "/etc/rc.conf"

# Sanitise PATH
export PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"

print "Initiating shutdown..."

# Open /dev/null so that it does not need to be opened everytime it is used
exec 3>/dev/null

# Run /etc/rc.local.shutdown
if [ -x "/etc/rc.local.shutdown" ]; then
    "/etc/rc.local.shutdown"
elif [ -r "/etc/rc.local.shutdown" ]; then
    . "/etc/rc.local.shutdown"
fi

# Stop all running daemons
(
    if [ -x "/etc/rc.local.hooks" ]; then
	"/etc/rc.local.hooks" stop-daemons
    fi
) & _daemons=$!

# Save random seed
(
    install -TDm600 /dev/null >/var/lib/misc/random-seed
    if [ -r /proc/sys/kernel/random/poolsize ]; then
	read POOLSIZE < /proc/sys/kernel/random/poolsize
	POOLSIZE=$(( POOLSIZE / 8 ))
    else
	POOLSIZE=512
    fi
    dd if=/dev/urandom of=/var/lib/misc/random-seed count=1 bs=$POOLSIZE 2>&3
) & _rnd=$!

# Stop devd
udevadm control --exit & _devd=$!

# Write to wtmp before unmounting
halt -w & _wtmp=$!

# Preloading function :: Terminate (kill if needed) remaining processes
kill_all()
{
    killall5 -$1
    for i in $(seq $2); do
	sleep 0.25
	killall5 -18 # send SIGCONT check if the processes are there
	_rc=$?
	if [ $_rc = 1 -o $_rc = 2 ]; then # 1: /proc is missing, 2: no process found
	    return 0;
	fi
    done
    return 1
}

# Wait for all remaining processes before stopping all running process
wait $_daemons $_rnd $_devd $_wtmp

# Terminate (kill if needed) remaining processes
(kill_all 15 40 || kill_all 9 60) 1>&3 2>&3 & _kill=$!

# Preloading function :: Unmount non-API mountpoints
umount_all()
{
    mounts=
    findmnt -mrunRo TARGET,FSTYPE,OPTIONS / | {
        while read -r target fstype options; do
            if [ -n $1 ] && [ ! $1 = "$fstype" ]; then
		continue
	    fi
	    if echo //proc//sys//run//dev//dev/pts// | grep /${target}//; then
		continue
	    fi
	    mounts="$target $mounts"
        done
        if [ -n "$mounts" ]; then
            umount -r $mounts
        fi
    }
}

# Wait for killing to finish
wait $_kill

# Unmount non-API swapbacked mountpoints
umount_all "tmpfs"

# Deactive all swap partitions
swapoff -a & _swap=$!

# Unmount all non-API filesystems
umount_all & _fs=$!

# Close /dev/null
exec 3<&-

# Shutdown
if [ -x /run/initramfs/shutdown ]; then
    # Initramfs has it's own shutdown, use it
    
    # Create directories for API filesystems
    mkdir -p /run/initramfs/proc /run/initramfs/sys /run/initramfs/dev /run/initramfs/run & _dirs=$!
    
    # Make /run/initramfs a mount
    mount --bind /run/initramfs /run/initramfs
    
    # Unshare / and /run/initramfs if they are shared
    mount --make-private /run/initramfs & _priv=$!
    mount --make-private / & _root=$!
    
    # Bind API filesystems
    (
	wait $_dirs
	mount --bind /sys /run/initramfs/sys
	mount --bind /proc /run/initramfs/proc
	mount --bind /dev /run/initramfs/dev
	mount --bind /run /run/initramfs/run
    ) & _bind=$!
    
    # Create directory for current / inside upcoming /
    mkdir -p /run/initramfs/oldroot
    
    # Wait for all remaining processes
    wait $_swap $_fs $_priv $_root $_bind
    
    # Swap /
    cd /run/initramfs
    pivot_root . oldroot
    
    # Re-exec init and run initramfs's shutdown
    /oldroot/sbin/init u & $_init=$!
    if [ $RUNLEVEL = 0 ]; then
        exec chroot . /shutdown poweroff < /dev/console > /dev/console 2>&1
    else
        exec chroot . /shutdown reboot < /dev/console > /dev/console 2>&1
    fi
else
    # Wait for all remaining processes
    wait $_swap $_fs
    
    # Remount / to read-only
    mount -o ro,remount /
    
    # Power off or reboot
    if [ $RUNLEVEL = 0 ]; then
	poweroff -d -f -h -i
    else
	reboot -d -f -i
    fi
fi

